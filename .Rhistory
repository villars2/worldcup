<<<<<<< HEAD
tied<-group$country[group$dups]
tied
group<-data.frame(country=as.factor(c("Brazil","Mexico","Croatia","Cameroon")), points=c(1,2,3,3), gd=c(3,2,2,2),gf=c(1,0,4,4))
group<-group[order(group$points,group$gd,group$gf,decreasing=TRUE),]
group$dup<-duplicated(subset(group,select=-c(country)),fromLast=TRUE)
check<-as.numeric(subset(group,dup==TRUE,select=c(points,gd,gf))[1,])
group$dups<-apply(as.matrix(subset(group,selec=c(points,gd,gf))),1,function(x) {identical(as.numeric(x),check)})
tied<-group$country[group$dups]
games<-grp
games$tie<-as.factor(games$country) %in% tied
games
agg<-aggregate(games$tie,games$game,min)
agg<-aggregate(games$tie,list(games$game),min)
agg
names(agg)<-c("game","tiedgames")
merge(games,agg)
group<-data.frame(country=as.factor(c("Brazil","Mexico","Croatia","Cameroon")), points=c(1,2,3,3), gd=c(3,2,2,2),gf=c(1,0,4,4))
group<-group[order(group$points,group$gd,group$gf,decreasing=TRUE),]
group$dup<-duplicated(subset(group,select=-c(country)),fromLast=TRUE)
check<-as.numeric(subset(group,dup==TRUE,select=c(points,gd,gf))[1,])
group$dups<-apply(as.matrix(subset(group,selec=c(points,gd,gf))),1,function(x) {identical(as.numeric(x),check)})
tied<-group$country[group$dups]
games<-grp
games$tie<-as.factor(games$country) %in% tied
agg<-aggregate(games,)
group<-data.frame(country=as.factor(c("Brazil","Mexico","Croatia","Cameroon")), points=c(1,2,3,3), gd=c(3,2,2,2),gf=c(1,0,4,4))
group<-group[order(group$points,group$gd,group$gf,decreasing=TRUE),]
group$dup<-duplicated(subset(group,select=-c(country)),fromLast=TRUE)
check<-as.numeric(subset(group,dup==TRUE,select=c(points,gd,gf))[1,])
tied<-group$country[group$dups]
games<-grp
group$dups<-apply(as.matrix(subset(group,selec=c(points,gd,gf))),1,function(x) {identical(as.numeric(x),check)})
games$tie<-as.factor(games$country) %in% tied
#agg<-aggregate(games,)
#group$dups<-(subset(group,select=c(points,gd,gf))==as.numeric(subset(group,dup==TRUE,select=c(points,gd,gf))))
agg<-aggregate(games$tie,list(games$game),min)
names(agg)<-c("game","tiedgames")
games<-merge(games,agg)
games
group<-data.frame(country=as.factor(c("Brazil","Mexico","Croatia","Cameroon")), points=c(1,2,3,3), gd=c(3,2,2,2),gf=c(1,0,4,4))
group<-group[order(group$points,group$gd,group$gf,decreasing=TRUE),]
group$dup<-duplicated(subset(group,select=-c(country)),fromLast=TRUE)
group
check<-as.numeric(subset(group,dup==TRUE,select=c(points,gd,gf))[1,])
group$dups<-apply(as.matrix(subset(group,selec=c(points,gd,gf))),1,function(x) {identical(as.numeric(x),check)})
group
tied<-group$country[group$dups]
group
grp
games<-grp
games$tie<-as.factor(games$country) %in% tied
games
agg<-aggregate(games$tie,list(games$game),min)
agg
names(agg)<-c("game","tiedgames")
agg
games
merge(games,agg)
games<-merge(games,agg)
games
tiedgroup<-subset(games,tiedgames==1,select=c(game,country,fifa_code,goals,group))
tiedgroup
length(tiedgroup)
length(tiedgroup,2)
length(tiedgroup[1,])
length(tiedgroup[,1])
grp
tiedgroup$teamingame<-rep(c(1,2),length(tiedgroup[,1])/2)
tiedgroup
grp<-tiedgroup
grp$teamingame<-rep(c(1,2),length(tiedgroup[,1])/2)
grp.wide<-dcast(grp,game~teamingame,value.var="goals")
names(grp.wide)<-c("game","g1","g2")
grp.wide$gd1<-grp.wide$g1-grp.wide$g2
grp.wide$gd2<-grp.wide$g2-grp.wide$g1
grp.wide<-subset(grp.wide,select=c(game,gd1,gd2))
grp.gd<-melt(grp.wide,id=c("game"))
grp.gd$variable<-substring(grp.gd$variable,3,4)
names(grp.gd)<-c("game","teamingame","gd")
grp.all<-merge(grp,grp.gd)
grp.all$pts<-sign(grp.all$gd)+1+as.numeric(grp.all$gd>0)
rankings<-ddply(grp.all,"country",summarize,points=sum(pts,na.rm=TRUE),gd=sum(gd,na.rm=TRUE),gf=sum(goals,na.rm=TRUE))
rankings<-rankings[order(rankings$points,rankings$gd,rankings$gf,decreasing=TRUE),]
rankings
grp
grp<-subset(groupGames,group=="A")
buildrankings(grp)
buildrankings <- function (grp) {
grp$teamingame<-rep(c(1,2),length(tiedgroup[,1])/2)
grp.wide<-dcast(grp,game~teamingame,value.var="goals")
names(grp.wide)<-c("game","g1","g2")
grp.wide$gd1<-grp.wide$g1-grp.wide$g2
grp.wide$gd2<-grp.wide$g2-grp.wide$g1
grp.wide<-subset(grp.wide,select=c(game,gd1,gd2))
grp.gd<-melt(grp.wide,id=c("game"))
grp.gd$variable<-substring(grp.gd$variable,3,4)
names(grp.gd)<-c("game","teamingame","gd")
grp.all<-merge(grp,grp.gd)
grp.all$pts<-sign(grp.all$gd)+1+as.numeric(grp.all$gd>0)
rankings<-ddply(grp.all,"country",summarize,points=sum(pts,na.rm=TRUE),gd=sum(gd,na.rm=TRUE),gf=sum(goals,na.rm=TRUE))
rankings<-rankings[order(rankings$points,rankings$gd,rankings$gf,decreasing=TRUE),]
return(rankings)
}
buildrankings(grp)
grp
group<-grp
group<-group[order(group$points,group$gd,group$gf,decreasing=TRUE),]
rankings
rankings<-buildrankings(grp)
rankings
group<-rankings
group<-group[order(group$points,group$gd,group$gf,decreasing=TRUE),]
group$dup<-duplicated(subset(group,select=-c(country)),fromLast=TRUE)
check<-as.numeric(subset(group,dup==TRUE,select=c(points,gd,gf))[1,])
group$dups<-apply(as.matrix(subset(group,selec=c(points,gd,gf))),1,function(x) {identical(as.numeric(x),check)})
tied<-group$country[group$dups]
games<-grp
games$tie<-as.factor(games$country) %in% tied
games
agg<-aggregate(games$tie,list(games$game),min)
names(agg)<-c("game","tiedgames")
games<-merge(games,agg)
tiedgroup<-subset(games,tiedgames==1,select=c(game,country,fifa_code,goals,group))
tiedgroup
getrankings(tiedgroup)
buildrankings(tiedgroup)
groupgrp
grp
group<-grp
group<-group[order(group$points,group$gd,group$gf,decreasing=TRUE),]
group$dup<-duplicated(subset(group,select=-c(country)),fromLast=TRUE)
check<-as.numeric(subset(group,dup==TRUE,select=c(points,gd,gf))[1,])
group$dups<-apply(as.matrix(subset(group,selec=c(points,gd,gf))),1,function(x) {identical(as.numeric(x),check)})
tied<-group$country[group$dups]
rnk<-buildrankings(grp)
grp
buildrankings(grp)
rm(grp)
grp<-subset(groupGames,group=="A")
grp$teamingame<-rep(c(1,2),length(tiedgroup[,1])/2)
buildrankings <- function (grp) {
grp$teamingame<-rep(c(1,2),length(grp[,1])/2)
grp.wide<-dcast(grp,game~teamingame,value.var="goals")
names(grp.wide)<-c("game","g1","g2")
grp.wide$gd1<-grp.wide$g1-grp.wide$g2
grp.wide$gd2<-grp.wide$g2-grp.wide$g1
grp.wide<-subset(grp.wide,select=c(game,gd1,gd2))
grp.gd<-melt(grp.wide,id=c("game"))
grp.gd$variable<-substring(grp.gd$variable,3,4)
names(grp.gd)<-c("game","teamingame","gd")
grp.all<-merge(grp,grp.gd)
grp.all$pts<-sign(grp.all$gd)+1+as.numeric(grp.all$gd>0)
rankings<-ddply(grp.all,"country",summarize,points=sum(pts,na.rm=TRUE),gd=sum(gd,na.rm=TRUE),gf=sum(goals,na.rm=TRUE))
rankings<-rankings[order(rankings$points,rankings$gd,rankings$gf,decreasing=TRUE),]
return(rankings)
}
grp
rnk<-buildrankings(grp)
rnk
group<-rnk
group<-group[order(group$points,group$gd,group$gf,decreasing=TRUE),]
group$dup<-duplicated(subset(group,select=-c(country)),fromLast=TRUE)
check<-as.numeric(subset(group,dup==TRUE,select=c(points,gd,gf))[1,])
group$dups<-apply(as.matrix(subset(group,selec=c(points,gd,gf))),1,function(x) {identical(as.numeric(x),check)})
tied<-group$country[group$dups]
games<-grp
games$tie<-as.factor(games$country) %in% tied
#agg<-aggregate(games,)
#group$dups<-(subset(group,select=c(points,gd,gf))==as.numeric(subset(group,dup==TRUE,select=c(points,gd,gf))))
agg<-aggregate(games$tie,list(games$game),min)
names(agg)<-c("game","tiedgames")
games<-merge(games,agg)
tiedgroup<-subset(games,tiedgames==1,select=c(game,country,fifa_code,goals,group))
tiedgroup
class(tiedgroup)
tiedgroup$game
tiedgroup$game==NULL
tiedgroup[1,]
tiedgroup[,1]
length(tiedgroup)
length(tiedgroup[,1])
group
rnk
tiebreak<-subset(rnk,select=country)
tiebreak$brk<-rep(1,4)
tiebreak
tiedgroup
length(tiedgroup[,1])
tiedgroup
group<-data.frame(country=as.factor(c("Brazil","Mexico","Croatia","Cameroon")), points=c(1,2,3,3), gd=c(3,2,2,2),gf=c(1,0,4,4))
group<-rnk
group<-data.frame(country=as.factor(c("Brazil","Mexico","Croatia","Cameroon")), points=c(1,2,3,3), gd=c(3,2,2,2),gf=c(1,0,4,4))
group<-group[order(group$points,group$gd,group$gf,decreasing=TRUE),]
group$dup<-duplicated(subset(group,select=-c(country)),fromLast=TRUE)
check<-as.numeric(subset(group,dup==TRUE,select=c(points,gd,gf))[1,])
group$dups<-apply(as.matrix(subset(group,selec=c(points,gd,gf))),1,function(x) {identical(as.numeric(x),check)})
tied<-group$country[group$dups]
games<-grp
games$tie<-as.factor(games$country) %in% tied
#agg<-aggregate(games,)
#group$dups<-(subset(group,select=c(points,gd,gf))==as.numeric(subset(group,dup==TRUE,select=c(points,gd,gf))))
agg<-aggregate(games$tie,list(games$game),min)
names(agg)<-c("game","tiedgames")
games<-merge(games,agg)
tiedgroup<-subset(games,tiedgames==1,select=c(game,country,fifa_code,goals,group))
tiedgroup$teamingame<-rep(c(1,2),length(tiedgroup[,1])/2)
tiedgroup
tiebreak<-subset(rnk,select=country)
tiebreak$brk<-rep(1,4)
if (length(tiedgroup[,1])>0) {
tiebreak<-buildrankings(tiedgroup)
}
tiebreak
tiebreak$brk<-(1:length(tiedgroup[,1])
)
tiebreak
buildtiebreak <- function(rnk) {
=======
}
sloseries<-c()
for (q in c("DRTS","DRSD")) {
for (t in c("CILM","CIS","PM","CREL")) {
sloseries<-c(sloseries,paste(q,t,sep=""))
}
}
bondseries<-c()
bondseries<-c(bondseries,paste("BAMLC0A",c(1:4),"C",c("AAA","AA","A","BBB"),"EY",sep=""))
bondseries<-c(bondseries,paste("BAMLH0A",c(1:3),"HY",c("BB","B","C"),"EY",sep=""))
bondseries<-c(bondseries,"AAA","BAA")
bcseries<-c()
for (bt in c("NNB","NNCB")) {
for (w in c("TABS","TFAABS","TRABS",
"TTAABS","IABS","ESABS","REABS",
"TLBS","TCMILBS","BLNECLBS","MLBS","TPLBS")) {
bcseries<-c(bcseries, paste(w,bt,sep=""))
}
}
bcseries<-c(bcseries,"TXLBSNNB","TXPLBSNNCB","CPLBSNNCB","CBLBSNNCB")
cpseries<-c("FINCP","COMPAPER","ABCOMP","CPN1M","CPN2M","CPN3M","CPF1M","CPF2M","CPF3M")
realqs<-c("GDPC96","GDPPOT","GPDIC96","PNFIC96","PCECC96","OPHNFB","ULCNFB")
table<-c("ADJRESNS","DEMDEPSL","IBLACBM027SBOG")
quandlseries<-c(cpseries,realqs,sloseries,table,
"GDP","FEDFUNDS","COE","CPIAUCSL","GCE" ,
"GDPDEF", "GPDI", "GS10", "HOANBS", "BASE",
"M1SL", "M2SL", "MZMSL", "NFINCP", "PCEC",
"TB3MS", "EXCRESNS", "UNRATE", "EQTA", "USROE",
"CORBLACBS", "USROA", "USNIM", "NPCMCM", "NCOCMC",
"TOTLL", "BUSLOANS", "REALLN", "CONSUMER", "LOANS",
"LOANINV", "USGSEC", "DRISCFLM", "DRISCFS")
fredseries<-c(loanseries,bondseries,bcseries,"VIXCLS","DJIA","SP500")
nonfredseries<-c("BCB/UDJIAD1","UMICH/SOC1")
# In quandl: cpseries, realqs, sloseries, table
# Not in quandl: loanseries, bondseries, bcseries, VIXCLS, DJIA, SP500
Quandl.auth("ncNy7saz6QdDjeBDKAcg")
quandlnames<-paste("FRED",quandlseries,sep="/")
tsobj<-Quandl(c(quandlnames,nonfredseries),type='xts')
for (ser in fredseries) {
tsobj<-merge(tsobj,getSymbols(ser,src='FRED',auto.assign=FALSE))
}
df<-as.data.frame(tsobj)
nonfredseries<-c("DJIA","UMCSENT")
names(df)<-c(quandlseries,nonfredseries,fredseries)
df$date<-index(tsobj)
df.l<-subset(melt(df,id="date"),!is.na(value))
#Define other variables
getDiff<-function(var,num,log=TRUE) {
df<-subset(df.l,variable==var)
df$variable<-paste(var,".diff",sep="")
if (log) {
df$value<-c(rep(NA,num),diff(log(df$value),lag=num)*100)
}
else {
df$value<-c(rep(NA,num),diff(df$value,lag=num))
}
return(df)
}
df.l<-rbind(df.l,getDiff("GDP",4,TRUE),
getDiff("TOTLL",52,TRUE),
getDiff("BUSLOANS",12,TRUE),
getDiff("REALLN",12,TRUE),
getDiff("CONSUMER",12,TRUE),
getDiff("LOANS",12,TRUE),
getDiff("LOANINV",12,TRUE),
getDiff("USGSEC",12,TRUE),
getDiff("GDPDEF",4,TRUE))
packages<-c("pwt8","WDI","ggplot2","googleVis",
"gdata","reshape","reshape2","stringr",
"quantmod","Quandl","SmarterPoland",
"directlabels","plyr","extrafont")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
ipak(packages)
## Creating series vectors
loanseries<-c()
for (v in c("EV","EA","ED","EE")) {
for (m in c("A","S","M")) {
for (r in c("","N","L","M")) {
loanseries<-c(loanseries,paste(v,m,r,"NQ",sep=""))
}
}
}
sloseries<-c()
for (q in c("DRTS","DRSD")) {
for (t in c("CILM","CIS","PM","CREL")) {
sloseries<-c(sloseries,paste(q,t,sep=""))
}
}
bondseries<-c()
bondseries<-c(bondseries,paste("BAMLC0A",c(1:4),"C",c("AAA","AA","A","BBB"),"EY",sep=""))
bondseries<-c(bondseries,paste("BAMLH0A",c(1:3),"HY",c("BB","B","C"),"EY",sep=""))
bondseries<-c(bondseries,"AAA","BAA")
bcseries<-c()
for (bt in c("NNB","NNCB")) {
for (w in c("TABS","TFAABS","TRABS",
"TTAABS","IABS","ESABS","REABS",
"TLBS","TCMILBS","BLNECLBS","MLBS","TPLBS")) {
bcseries<-c(bcseries, paste(w,bt,sep=""))
}
}
bcseries<-c(bcseries,"TXLBSNNB","TXPLBSNNCB","CPLBSNNCB","CBLBSNNCB")
cpseries<-c("FINCP","COMPAPER","ABCOMP","CPN1M","CPN2M","CPN3M","CPF1M","CPF2M","CPF3M")
realqs<-c("GDPC96","GDPPOT","GPDIC96","PNFIC96","PCECC96","OPHNFB","ULCNFB")
table<-c("ADJRESNS","DEMDEPSL","IBLACBM027SBOG")
quandlseries<-c(cpseries,realqs,sloseries,table,
"GDP","FEDFUNDS","COE","CPIAUCSL","GCE" ,
"GDPDEF", "GPDI", "GS10", "HOANBS", "BASE",
"M1SL", "M2SL", "MZMSL", "NFINCP", "PCEC",
"TB3MS", "EXCRESNS", "UNRATE", "EQTA", "USROE",
"CORBLACBS", "USROA", "USNIM", "NPCMCM", "NCOCMC",
"TOTLL", "BUSLOANS", "REALLN", "CONSUMER", "LOANS",
"LOANINV", "USGSEC", "DRISCFLM", "DRISCFS")
fredseries<-c(loanseries,bondseries,bcseries,"VIXCLS","DJIA","SP500")
nonfredseries<-c("BCB/UDJIAD1","UMICH/SOC1")
# In quandl: cpseries, realqs, sloseries, table
# Not in quandl: loanseries, bondseries, bcseries, VIXCLS, DJIA, SP500
Quandl.auth("ncNy7saz6QdDjeBDKAcg")
quandlnames<-paste("FRED",quandlseries,sep="/")
tsobj<-Quandl(c(quandlnames,nonfredseries),type='xts')
for (ser in fredseries) {
tsobj<-merge(tsobj,getSymbols(ser,src='FRED',auto.assign=FALSE))
}
df<-as.data.frame(tsobj)
nonfredseries<-c("DJIA","UMCSENT")
names(df)<-c(quandlseries,nonfredseries,fredseries)
df$date<-index(tsobj)
df.l<-subset(melt(df,id="date"),!is.na(value))
#Define other variables
getDiff<-function(var,num,log=TRUE) {
df<-subset(df.l,variable==var)
df$variable<-paste(var,".diff",sep="")
if (log) {
df$value<-c(rep(NA,num),diff(log(df$value),lag=num)*100)
}
else {
df$value<-c(rep(NA,num),diff(df$value,lag=num))
}
return(df)
}
df.l<-rbind(df.l,getDiff("GDP",4,TRUE),
getDiff("TOTLL",52,TRUE),
getDiff("BUSLOANS",12,TRUE),
getDiff("REALLN",12,TRUE),
getDiff("CONSUMER",12,TRUE),
getDiff("LOANS",12,TRUE),
getDiff("LOANINV",12,TRUE),
getDiff("USGSEC",12,TRUE),
getDiff("GDPDEF",4,TRUE))
subset(df.l,variable=="BOA_AAA")
subset(df.l,variable %in% bondseries)
subset(df.l,variable=="FEDFUNDS")
head(Quandl("DFF",type='xts'))
head(Quandl("FRED/DFF",type='xts'))
tail(Quandl("FRED/DFF",type='xts'))
bla<-Quandl("FRED/DFF",type='xts')
bla[,1]
plot(bla[,1])
bla2<-cumsum(log(1+bla[,1]/365))
plot(bla2)
plot(bla,bla2)
scatter(bla,bla2)
head(bla)
plot(bla[,1],bla2[,1])
plot(bla[,2])
plot(bla2[,1])
plot(bla[,1])
json_file<-"http://worldcup.sfg.io/matches/"
json_data<-fromJSON(json_file)
game1<-subset(do.call("rbind.fill",lapply(json_data[[1]],as.data.frame)),country!="<NA>",select=c(country,code,goals))
library(rjson)
json_file<-"http://worldcup.sfg.io/matches/"
json_data<-fromJSON(json_file)
library(reshape)
library(reshape2)
library(plyr)
library(rjson)
library(ggplot2)
# groupA<-data.frame(game=c(1,1,2,2,3,3,4,4,5,5,6,6),team=c(1,2,3,4,1,3,2,4,1,4,2,3))
# groupA$goals<-c(rpois(8,1),rep(NA,4))
### Set directory and load in scores
#cd<-"C:/Users/Sergio/Documents/GitHub/worldcup"
#cd<-"C:/Users/sv2307/Documents/GitHub/worldcup"
##### Put functions here
### Pulling data from world cup API.
## Argument=1 is to pull file from API, 2 is to get file and save, 3 is to
## read file from filename (only body of name, no .csv)
buildgroups <- function (save=1,filename="groupPull") {
if (save==1 || save==2) {
json_file<-"http://worldcup.sfg.io/matches"
json_data<-fromJSON(file=json_file)
pullGame <- function(g_data) {
g<-subset(subset(do.call("rbind.fill",lapply(g_data,as.data.frame)),country!="<NA>",select=c(country,code,goals)))
g$g_id<-g_data[[1]]
if (g_data[[4]]=="future") {
g$goals<-c(NA,NA)
}
g$curr<-rep((g_data[[4]]=="in progress"),2)
return(g)
}
groupGames<-do.call("rbind.fill",lapply(lapply(json_data[1:48],pullGame),as.data.frame))
names(groupGames)<-c("country","fifa_code","goals","game","curr")
teams_file<-"http://worldcup.sfg.io/teams"
teams_data<-fromJSON(file=teams_file)
teams_data<-lapply(teams_data, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
teamsMaster<-as.data.frame(do.call("rbind", teams_data))
teamsMaster$group<-LETTERS[teamsMaster$group_id]
teamsMaster<-subset(teamsMaster,select=c(country,fifa_code,group))
groupGames<-merge(groupGames,teamsMaster)
groupGames<-groupGames[order(groupGames$group,groupGames$game),]
currentscore<<-as.numeric(subset(groupGames,curr)$goals)
}
if (save==2) {
write.csv(groupGames,paste(getwd(),"/groupPull.csv",sep=""))
}
if (save==3) {
groupGames<-read.csv(paste(getwd(),"/",filename,".csv", sep=""))
}
return(groupGames)
}
### Function to break ties
buildtiebreak <- function(rnk,g) {
>>>>>>> origin/master
group<-rnk
group<-group[order(group$points,group$gd,group$gf,decreasing=TRUE),]
group$dup<-duplicated(subset(group,select=-c(country)),fromLast=TRUE)
check<-as.numeric(subset(group,dup==TRUE,select=c(points,gd,gf))[1,])
group$dups<-apply(as.matrix(subset(group,selec=c(points,gd,gf))),1,function(x) {identical(as.numeric(x),check)})
tied<-group$country[group$dups]
<<<<<<< HEAD
games<-grp
=======
nottied<-group$country[!group$dups]
games<-g
>>>>>>> origin/master
games$tie<-as.factor(games$country) %in% tied
#agg<-aggregate(games,)
#group$dups<-(subset(group,select=c(points,gd,gf))==as.numeric(subset(group,dup==TRUE,select=c(points,gd,gf))))
agg<-aggregate(games$tie,list(games$game),min)
names(agg)<-c("game","tiedgames")
games<-merge(games,agg)
tiedgroup<-subset(games,tiedgames==1,select=c(game,country,fifa_code,goals,group))
tiedgroup$teamingame<-rep(c(1,2),length(tiedgroup[,1])/2)
<<<<<<< HEAD
tiebreak<-subset(rnk,select=country)
=======
tiebreak<-subset(group,select=country)
>>>>>>> origin/master
tiebreak$brk<-rep(1,4)
if (length(tiedgroup[,1])>0) {
tiebreak<-buildrankings(tiedgroup)
tiebreak$brk<-(1:length(tiedgroup[,1]))
tiebreak<-subset(tiebreak,select=c(country,brk))
<<<<<<< HEAD
}
return(tiebreak)
}
group
grp
buildtiebreak(group)
group<-data.frame(country=as.factor(c("Brazil","Mexico","Croatia","Cameroon")), points=c(1,2,3,3), gd=c(3,2,2,2),gf=c(1,0,4,4))
buildtiebreak(group)
buildrankings <- function (grp) {
grp$teamingame<-rep(c(1,2),length(grp[,1])/2)
grp.wide<-dcast(grp,game~teamingame,value.var="goals")
names(grp.wide)<-c("game","g1","g2")
grp.wide$gd1<-grp.wide$g1-grp.wide$g2
grp.wide$gd2<-grp.wide$g2-grp.wide$g1
grp.wide<-subset(grp.wide,select=c(game,gd1,gd2))
grp.gd<-melt(grp.wide,id=c("game"))
grp.gd$variable<-substring(grp.gd$variable,3,4)
names(grp.gd)<-c("game","teamingame","gd")
grp.all<-merge(grp,grp.gd)
grp.all$pts<-sign(grp.all$gd)+1+as.numeric(grp.all$gd>0)
rankings<-ddply(grp.all,"country",summarize,points=sum(pts,na.rm=TRUE),gd=sum(gd,na.rm=TRUE),gf=sum(goals,na.rm=TRUE))
rankings<-rankings[order(rankings$points,rankings$gd,rankings$gf,decreasing=TRUE),]
return(rankings)
}
### Function to get top 2 teams (in order) in each group given scores
gothru<-function(grp) {
#   grp$teamingame<-rep(c(1,2),6)
#   grp.wide<-dcast(grp,game~teamingame,value.var="goals")
#   names(grp.wide)<-c("game","g1","g2")
#   grp.wide$gd1<-grp.wide$g1-grp.wide$g2
#   grp.wide$gd2<-grp.wide$g2-grp.wide$g1
#   grp.wide<-subset(grp.wide,select=c(game,gd1,gd2))
#   grp.gd<-melt(grp.wide,id=c("game"))
#   grp.gd$variable<-substring(grp.gd$variable,3,4)
#   names(grp.gd)<-c("game","teamingame","gd")
#
#   grp.all<-merge(grp,grp.gd)
#   grp.all$pts<-sign(grp.all$gd)+1+as.numeric(grp.all$gd>0)
#
#   rankings<-ddply(grp.all,"country",summarize,points=sum(pts,na.rm=TRUE),gd=sum(gd,na.rm=TRUE),gf=sum(goals,na.rm=TRUE))
#   rankings<-rankings[order(rankings$points,rankings$gd,rankings$gf,decreasing=TRUE),]
rankings<-buildrankings(grp)
rankings<-merge(rankings,buildtiebreak(rankings))
rankings<-rankings[order(rankings$points,rankings$gd,rankings$gf,rankings$brk,decreasing=TRUE)]
thru<-rankings$country[1:2]
return(thru)
}
group<-data.frame(country=as.factor(c("Brazil","Mexico","Croatia","Cameroon")), points=c(1,2,3,3), gd=c(3,2,2,2),gf=c(1,0,4,4))
group
bla<-subset(groupGames,group=="A")
bla
gothru(bla)
buildrankings(bla)
rankings<-merge(rankings,buildtiebreak(rankings))
rankings
rankings<-rankings[order(rankings$points,rankings$gd,rankings$gf,rankings$brk,decreasing=TRUE)]
rankings
rankings<-buildrankings(grp)
rankings<-merge(rankings,buildtiebreak(rankings))
rankings
order(rankings$points)
order(rankings$points,decreasing=TRUE)
order(rankings$points,rankings$gfdecreasing=TRUE)
order(rankings$points,rankings$gf,decreasing=TRUE)
order(rankings$points,rankings$gd,rankings$gf,rankings$brk,decreasing=TRUE)
rankings[order(rankings$points,rankings$gd,rankings$gf,rankings$brk,decreasing=TRUE)]
rankings
rankings<-rankings[order(rankings$points,rankings$gd,rankings$gf,rankings$brk,decreasing=TRUE),]
rankings
=======
remaining<-data.frame(country=nottied,brk=1)
tiebreak<-rbind(tiebreak,remaining)
}
return(tiebreak)
}
>>>>>>> origin/master
### Function to build group rankings
buildrankings <- function (grp) {
grp$teamingame<-rep(c(1,2),length(grp[,1])/2)
grp.wide<-dcast(grp,game~teamingame,value.var="goals")
names(grp.wide)<-c("game","g1","g2")
grp.wide$gd1<-grp.wide$g1-grp.wide$g2
grp.wide$gd2<-grp.wide$g2-grp.wide$g1
grp.wide<-subset(grp.wide,select=c(game,gd1,gd2))
grp.gd<-melt(grp.wide,id=c("game"))
grp.gd$variable<-substring(grp.gd$variable,3,4)
names(grp.gd)<-c("game","teamingame","gd")
grp.all<-merge(grp,grp.gd)
grp.all$pts<-sign(grp.all$gd)+1+as.numeric(grp.all$gd>0)
rankings<-ddply(grp.all,"country",summarize,points=sum(pts,na.rm=TRUE),gd=sum(gd,na.rm=TRUE),gf=sum(goals,na.rm=TRUE))
rankings<-rankings[order(rankings$points,rankings$gd,rankings$gf,decreasing=TRUE),]
return(rankings)
<<<<<<< HEAD
}
### Function to get top 2 teams (in order) in each group given scores
gothru<-function(grp) {
#   grp$teamingame<-rep(c(1,2),6)
#   grp.wide<-dcast(grp,game~teamingame,value.var="goals")
#   names(grp.wide)<-c("game","g1","g2")
#   grp.wide$gd1<-grp.wide$g1-grp.wide$g2
#   grp.wide$gd2<-grp.wide$g2-grp.wide$g1
#   grp.wide<-subset(grp.wide,select=c(game,gd1,gd2))
#   grp.gd<-melt(grp.wide,id=c("game"))
#   grp.gd$variable<-substring(grp.gd$variable,3,4)
#   names(grp.gd)<-c("game","teamingame","gd")
#
#   grp.all<-merge(grp,grp.gd)
#   grp.all$pts<-sign(grp.all$gd)+1+as.numeric(grp.all$gd>0)
#
#   rankings<-ddply(grp.all,"country",summarize,points=sum(pts,na.rm=TRUE),gd=sum(gd,na.rm=TRUE),gf=sum(goals,na.rm=TRUE))
#   rankings<-rankings[order(rankings$points,rankings$gd,rankings$gf,decreasing=TRUE),]
rankings<-buildrankings(grp)
rankings<-merge(rankings,buildtiebreak(rankings))
rankings<-rankings[order(rankings$points,rankings$gd,rankings$gf,rankings$brk,decreasing=TRUE),]
thru<-rankings$country[1:2]
return(thru)
}
group
bla
gothru(bla)
gothru(subset(groupGames,group=="B"))
gothru(subset(groupGames,group=="C"))
gothru(subset(groupGames,group=="D"))
gothru(subset(groupGames,group=="E"))
group<-data.frame(country=c("A","B","A","C","B","C"),game=c(1,1,2,2,3,3),goals=c(3,0,0,3,2,0))
group
buildrankings(group)
group<-data.frame(country=c("A","B","A","C","B","C"),game=c(1,1,2,2,3,3),goals=c(2,0,0,3,2,0))
buildrankings(group)
builrankings(subset(groupGames,group=="A"))
buildrankings(subset(groupGames,group=="A"))
bla<-subset(groupGames,group=="A")
bla
bla[3,11:12]
bla$goals[11:12]
bla$goals[11:12]<-c(2,6)
bla
buildrankings(bla)
gothru(bla)
bla
bla$goals<-c(1,0,0,0,0,1,1,0,1,0,1,0)
buildrankings(bla)
bla
gothru(bla)
gothru<-function(grp) {
#   grp$teamingame<-rep(c(1,2),6)
#   grp.wide<-dcast(grp,game~teamingame,value.var="goals")
#   names(grp.wide)<-c("game","g1","g2")
#   grp.wide$gd1<-grp.wide$g1-grp.wide$g2
#   grp.wide$gd2<-grp.wide$g2-grp.wide$g1
#   grp.wide<-subset(grp.wide,select=c(game,gd1,gd2))
#   grp.gd<-melt(grp.wide,id=c("game"))
#   grp.gd$variable<-substring(grp.gd$variable,3,4)
#   names(grp.gd)<-c("game","teamingame","gd")
#
#   grp.all<-merge(grp,grp.gd)
#   grp.all$pts<-sign(grp.all$gd)+1+as.numeric(grp.all$gd>0)
#
#   rankings<-ddply(grp.all,"country",summarize,points=sum(pts,na.rm=TRUE),gd=sum(gd,na.rm=TRUE),gf=sum(goals,na.rm=TRUE))
#   rankings<-rankings[order(rankings$points,rankings$gd,rankings$gf,decreasing=TRUE),]
rankings<-buildrankings(grp)
rankings<-merge(rankings,buildtiebreak(rankings))
rankings<-rankings[order(rankings$points,rankings$gd,rankings$gf,-rankings$brk,decreasing=TRUE),]
thru<-rankings$country[1:2]
return(thru)
=======
}
### Function to get top 2 teams (in order) in each group given scores
gothru<-function(grp) {
#   grp$teamingame<-rep(c(1,2),6)
#   grp.wide<-dcast(grp,game~teamingame,value.var="goals")
#   names(grp.wide)<-c("game","g1","g2")
#   grp.wide$gd1<-grp.wide$g1-grp.wide$g2
#   grp.wide$gd2<-grp.wide$g2-grp.wide$g1
#   grp.wide<-subset(grp.wide,select=c(game,gd1,gd2))
#   grp.gd<-melt(grp.wide,id=c("game"))
#   grp.gd$variable<-substring(grp.gd$variable,3,4)
#   names(grp.gd)<-c("game","teamingame","gd")
#
#   grp.all<-merge(grp,grp.gd)
#   grp.all$pts<-sign(grp.all$gd)+1+as.numeric(grp.all$gd>0)
#
#   rankings<-ddply(grp.all,"country",summarize,points=sum(pts,na.rm=TRUE),gd=sum(gd,na.rm=TRUE),gf=sum(goals,na.rm=TRUE))
#   rankings<-rankings[order(rankings$points,rankings$gd,rankings$gf,decreasing=TRUE),]
rankings<-buildrankings(grp)
rankings<-merge(rankings,buildtiebreak(rankings,grp))
rankings<-rankings[order(rankings$points,rankings$gd,rankings$gf,-rankings$brk,decreasing=TRUE),]
thru<-rankings$country[1:2]
### When considering complete ties, rank using
### order<-5-rank(paste(as.character(rnk$points),as.character(rnk$gd),as.character(rnk$gf),as.character(rnk$rnk)),ties.method="max")
### Then, if more than one 1, name all ones the same (ARGxBRAxFRA,etc)
### If more than one 2, name one as first, and name all 2s the same (ARGxBRA, etc)
return(thru)
}
### Function to replace NA scores by simulated scores, and get top 2 teams
simulate <- function (scores) {
grp<-group
# Change this to allow for current games
grp$goals[is.na(grp$goals) | grp$curr]<-scores
return(gothru(grp))
}
### Compute qualifying teams given all possible scores
Mode <- function(vec) {
all<-levels(vec)
all[which.max(tabulate(match(vec,all)))]
>>>>>>> origin/master
}
gothru(bla)
gothru(bla)
gothru(bla)
buildrankings(bla)
rnk<-buildrankings(bla)
rnk
rnk[1,1]
rnk[1,2]
rnk[1,2:4]
identical(rnk[1,2:4])
identical(rnk[1,2:4],rnk[2,2:4])
rnk[1,2:4]
rnk[2,2:4]
identical(as.numeric(rnk[1,2:4]),as.numeric(rnk[2,2:4]))
as.factor(c(1,2,3))
rnk
paste(countr$c(points,gd,gf))
paste(country$c(points,gd,gf))
paste(rnk$c(points,gd,gf))
paste(rnk$points,rnk$gdp,rnk$gf)
getsummary("E")
plotpossible(simul)
ggsave(filename=paste(getwd(),"/groupEplot.png",sep=""),plot=plotpossible(simul))
?ggsave
ggsave(filename=paste(getwd(),"/groupEplot.png",sep=""),plot=plotpossible(simul),width=10,height=15)
?facet_grid
plotpossible <- function(df) {
df$score1<-df[,1]-df[,2]
df$score2<-df[,3]-df[,4]
g1<-paste(names(df)[1],names(df)[2],sep="-")
g2<-paste(names(df)[3],names(df)[4],sep="-")
df<-subset(df,select=c(first,second,score1,score2))
df.l<<-melt(df,id=c("score1","score2"))
names(df.l)<-c(g1,g2,"rank","country")
g<-ggplot(df.l,aes(x=jitter(df.l[,1],amount=0.1),y=jitter(df.l[,2],amount=0.1),colour=country))+
geom_point(size=2,alpha=0.7)+
facet_grid(.~rank~)+
xlab(g1)+
ylab(g2)+
theme_bw()
return(g)
}
<<<<<<< HEAD
plotpossible <- function(df) {
df$score1<-df[,1]-df[,2]
df$score2<-df[,3]-df[,4]
g1<-paste(names(df)[1],names(df)[2],sep="-")
g2<-paste(names(df)[3],names(df)[4],sep="-")
df<-subset(df,select=c(first,second,score1,score2))
df.l<<-melt(df,id=c("score1","score2"))
names(df.l)<-c(g1,g2,"rank","country")
g<-ggplot(df.l,aes(x=jitter(df.l[,1],amount=0.1),y=jitter(df.l[,2],amount=0.1),colour=country))+
geom_point(size=2,alpha=0.7)+
facet_grid(.~rank~)+
xlab(g1)+
ylab(g2)+
theme_bw()
return(g)
}
plotpossible <- function(df) {
df$score1<-df[,1]-df[,2]
df$score2<-df[,3]-df[,4]
g1<-paste(names(df)[1],names(df)[2],sep="-")
g2<-paste(names(df)[3],names(df)[4],sep="-")
df<-subset(df,select=c(first,second,score1,score2))
df.l<<-melt(df,id=c("score1","score2"))
names(df.l)<-c(g1,g2,"rank","country")
g<-ggplot(df.l,aes(x=jitter(df.l[,1],amount=0.1),y=jitter(df.l[,2],amount=0.1),colour=country))+
geom_point(size=2,alpha=0.7)+
facet_grid(.~rank)+
xlab(g1)+
ylab(g2)+
theme_bw()
return(g)
}
plotpossible(simul)
ggsave(filename=paste(getwd(),"/groupEplot.png",sep=""),plot=plotpossible(simul),width=10,height=15)
ggsave(filename=paste(getwd(),"/groupEplot.png",sep=""),plot=plotpossible(simul),width=15,height=10)
ggsave(filename=paste(getwd(),"/groupEplot.png",sep=""),plot=plotpossible(simul),width=10,height=7)
rnk
rnk$rnk<-rank(rnk$points, ties.method="max")
rnk$rnk<-rank(rnk$points, ties.method="min")
rnk
rnk$rnk<-rank(rnk$points,rnk$gd, ties.method="min")
rnk$rnk<-rank(rnk$points,rnk$gd,rnk$gf, ties.method="min")
?rank
rank(rnk)
as.factor(1,4,6)
as.factor(c(1,4,6))
as.factor(c("1","4","6"))
as.factor(c("1","4","6"))[2]
as.factor(c("1","4","6"))[3]
bla
grp
rnk
paste(as.character(rnk$points),as.character(rnk$gd))
paste(as.character(rnk$points),as.character(rnk$gd),as.character(rnk$gf),as.character(rnk$rnk))
as.levels(paste(as.character(rnk$points),as.character(rnk$gd),as.character(rnk$gf),as.character(rnk$rnk)))
as.factor(paste(as.character(rnk$points),as.character(rnk$gd),as.character(rnk$gf),as.character(rnk$rnk)))
as.factor(paste(as.character(rnk$points),as.character(rnk$gd),as.character(rnk$gf),as.character(rnk$rnk)))[1]
factor(paste(as.character(rnk$points),as.character(rnk$gd),as.character(rnk$gf),as.character(rnk$rnk)))[1]
factor(paste(as.character(rnk$points),as.character(rnk$gd),as.character(rnk$gf),as.character(rnk$rnk)))
factor(paste(as.character(rnk$points),as.character(rnk$gd),as.character(rnk$gf),as.character(rnk$rnk)))[1]
factor("braxil","croatia")
factor(c("braxil","croatia"))
factor(c("braxil","croatia"))[1]
as,numeric(factor(c("braxil","croatia"))[1])
as.numeric(factor(c("braxil","croatia"))[1])
as.numeric(factor(c("braxil","croatia"))[2])
as.numeric(factor(paste(as.character(rnk$points),as.character(rnk$gd),as.character(rnk$gf),as.character(rnk$rnk))))
max(as.numeric(factor(paste(as.character(rnk$points),as.character(rnk$gd),as.character(rnk$gf),as.character(rnk$rnk)))))
rank(paste(as.character(rnk$points),as.character(rnk$gd),as.character(rnk$gf),as.character(rnk$rnk)))
rank(paste(as.character(rnk$points),as.character(rnk$gd),as.character(rnk$gf),as.character(rnk$rnk)),ties.method="min")
?rank
rnk
rank(paste(as.character(rnk$points),as.character(rnk$gd),as.character(rnk$gf),as.character(rnk$rnk)),ties.method="max")
5-rank(paste(as.character(rnk$points),as.character(rnk$gd),as.character(rnk$gf),as.character(rnk$rnk)),ties.method="max")
=======
### Builds summary of outcomes given scores
getsummary <- function (gr) {
#group<<-subset(read.csv(paste(cd,"groups.csv", sep="/")),group==gr)
group<<-subset(groupGames,group==gr)
### Load in team names by group/team id
#master<<-subset(read.csv(paste(cd,"master.csv",sep="/")),group==gr,select=c(team,teamname))
# gothru(groupA)
# To get result for 2 outcomes: sapply(list(groupA,groupA2),gothru)
### Simulate given all scores with between 0 and 5 goals.
#group<-group
# Here we could automatically make the simulation grid using, but would get big (1.7E6) rows
gamesleft<-nrow(subset(group,is.na(goals) | curr))
simulation<-expand.grid(as.data.frame(matrix(rep(0:5,gamesleft),ncol=gamesleft)))
# simulation<-expand.grid(g1=c(0:5),g2=c(0:5),g3=c(0:5),g4=c(0:5))
names(simulation)<-as.character(paste("g",subset(group,is.na(goals) | curr)$country,sep=""))
results<-apply(simulation,1,simulate)
simulation$first<-as.factor(results[1,])
simulation$second<-as.factor(results[2,])
#masterfirst<-master
#names(masterfirst)<-c("first","firstname")
#mastersecond<-master
#names(mastersecond)<-c("second","secondname")
simulation$score1<-sign(simulation[,1]-simulation[,2])
simulation$score2<-sign(simulation[,3]-simulation[,4])
#simulation<-merge(merge(simulation,masterfirst),mastersecond)
simul<<-simulation
### Summary, aggregated by result (W/D/L) in each remaining game
## firstmd and secondmd are the team that comes first or second most often,
## and firstonly and secondonly are indicators for whether that team
## is always in first or second place (could not be because of goal difference, etc)
summary<-ddply(simulation,c("score1","score2"),summarize,firstmd=Mode(first),firstonly=only(first),secondmd=Mode(second),secondonly=only(second))
### Making it look nice...
summary$score1[summary$score1==-1]<-"L"
summary$score1[summary$score1==0]<-"T"
summary$score1[summary$score1==1]<-"W"
summary$score2[summary$score2==-1]<-"L"
summary$score2[summary$score2==0]<-"T"
summary$score2[summary$score2==1]<-"W"
remaininggames<-subset(group,is.na(goals) | curr)
summary$score1<-paste(remaininggames$country[1],
summary$score1,
remaininggames$country[2],
sep=" ")
summary$score2<-paste(remaininggames$country[3],
summary$score2,
remaininggames$country[4],
sep=" ")
#masterfirst<-master
#names(masterfirst)<-c("firstmd","firstmdname")
#mastersecond<-master
#names(mastersecond)<-c("secondmd","secondmdname")
#summary$group<-gr
#summary<-merge(merge(summary,masterfirst),mastersecond)
#summary$res1<-paste()
return(summary)
}
### Possible outcomes given a certain score (for different goal combinations)
possible <- function (outcomes) {
possoutcomes<-subset(simul,score1==outcomes[1] & score2==outcomes[2],select=-c(score1,score2))
possoutcomes<-possoutcomes[order(possoutcomes$first,possoutcomes$second),]
return(possoutcomes)
}
### Plot outcomes given scores:
plotpossible <- function(dframe) {
df<-dframe
df$score1<-df[,1]-df[,2]
df$score2<-df[,3]-df[,4]
g1<-paste(names(df)[1],names(df)[2],sep="-")
g2<-paste(names(df)[3],names(df)[4],sep="-")
df<-subset(df,select=c(first,second,score1,score2))
df.l<<-melt(df,id=c("score1","score2"))
names(df.l)<-c(g1,g2,"rank","country")
g<-ggplot(df.l,aes(x=jitter(df.l[,1],amount=0.1),y=jitter(df.l[,2],amount=0.1),colour=country))+
geom_point(size=2,alpha=0.7)+
facet_grid(.~rank)+
xlab(g1)+
scale_x_continuous(breaks=c(-4,-2,0,2,4))+
ylab(g2)+
scale_y_continuous(breaks=c(-4,-2,0,2,4))+
theme_bw()
return(g)
}
plotcurrent <- function(dframe) {
df<-dframe
df$score1<-df[,1]-df[,2]
df$score2<-df[,3]-df[,4]
g1<-paste(names(df)[1],names(df)[2],sep="-")
g2<-paste(names(df)[3],names(df)[4],sep="-")
df<-subset(df,select=c(first,second,score1,score2,current))
df.l<<-melt(df,id=c("score1","score2","current"))
names(df.l)<-c(g1,g2,"current","rank","country")
shape<-c(16,1)
size<-c(2,10)
df.l$x<-jitter(df.l[,1],amount=0.1)
df.l[df.l$current,6]<-as.numeric(subset(df.l,current)[,1])
df.l$y<-jitter(df.l[,2],amount=0.1)
df.l[df.l$current,7]<-as.numeric(subset(df.l,current)[,2])
title1<-paste(subset(groupGames,curr)$country,currentscore)[1:2]
title2<-paste(subset(groupGames,curr)$country,currentscore)[3:4]
titl<-paste(paste(title1,collapse="/"),paste(title2,collapse="/"),sep=" & ")
g<-ggplot(df.l,aes(x=x,y=y,
colour=country,
shape=current,
size=current))+
geom_point(alpha=0.7)+
scale_shape_manual(values=shape)+
scale_size_manual(values=size)+
facet_grid(.~rank)+
xlab(g1)+
scale_x_continuous(breaks=c(-4,-2,0,2,4))+
ylab(g2)+
scale_y_continuous(breaks=c(-4,-2,0,2,4))+
theme_bw()+
ggtitle(titl)
return(g)
}
###Left to do:
##Get current scores
# Status of game is "in progress"
# Could build variable when building groups on whether it's in progress,
# Then can allow simulations for those games but pick the scores into currentscore
# getcurrent <- function() {
#
# }
##Subset only possible scores given current score
#currentscore<-getcurrent()
iscurrent<- function(x) {
identical(curscore,as.numeric(x))
}
ispossible<-function(x) {
min(as.numeric(x)-curscore)>=0
}
getcurrent <- function(curr) {
curscore<<-curr
simulsmaller<-simul
simulsmaller$current<-apply(subset(simulsmaller,select=-c(first,second,score1,score2)),1,iscurrent)
simulsmaller$can    <-apply(subset(simulsmaller,select=-c(first,second,score1,score2,current)),1,ispossible)
return(subset(simulsmaller,can,select=-c(can)))
}
##Find a way to properly display current scores
##Find and tag drawing lots scenarios (color=grey)
### Examples:
groupGames<-buildgroups(1)
#getsummary("A")
#getsummary("G")
#possible(c(1,1))
getsummary("E")
plotcurrent(getcurrent(currentscore))
ggsave(filename=paste(getwd(),"/groupEplot.png",sep=""),plot=plotcurrent(getcurrent(currentscore)),width=10,height=7)
ggsave(filename=paste(getwd(),"/groupEplot.png",sep=""),plot=plotcurrent(getcurrent(currentscore)),width=10,height=7)
getwd()
setwd(paste(getwd(),"/GitHub/worldcup/",sep=""))
ggsave(filename=paste(getwd(),"/groupEplot.png",sep=""),plot=plotcurrent(getcurrent(currentscore)),width=10,height=7)
groupGames<-buildgroups(1)
groupGames
groupGames<-buildgroups(1)
groupGames
groupGames<-buildgroups(1)
groupGames
getsummary("E")
ggsave(filename=paste(getwd(),"/groupEplot.png",sep=""),plot=plotcurrent(getcurrent(currentscore)),width=10,height=7)
numeric(1)
as.numeric(1)==as.integer(1)
as.numeric(35461)==as.integer(35461)
buildrankings(subset(groupGames,group=="E"))
groupGames<-buildgroups(1)
#getsummary("A")
#getsummary("G")
#possible(c(1,1))
getsummary("E")
plotcurrent(getcurrent(currentscore))
ggsave(filename=paste(getwd(),"/groupEplot.png",sep=""),plot=plotcurrent(getcurrent(currentscore)),width=10,height=7)
groupGames
groupGames<-buildgroups(1)
groupGames
getsummary("E")
ggsave(filename=paste(getwd(),"/groupEplot.png",sep=""),plot=plotcurrent(getcurrent(currentscore)),width=10,height=7)
groupGames<-buildgroups(1)
groupGames
ddply(groupGames,id=c("group"),getthru)
ddply(groupGames,id=c("group"),gothru)
?ddply
ddply(groupGames,.(group),gothru)
head(groupGames)
str(groupGames)
groupGames$country<-as.character(groupGames$country)
head(groupGames)
ddply(groupGames,.(group),gothru)
ddply(groupGames,.(group),gothru,done=max(is.na(goals) | curr))
ddply(groupGames,.(group),summarize,gothru,done=max(is.na(goals) | curr))
ddply(groupGames,.(group),summarize,gothru(x)[1],gothru(x)[2],done=max(is.na(x$goals) | curr))
ddply(groupGames,.(group),done=max(is.na(x$goals) | curr))
ddply(groupGames,.(group),done=max(is.na(goals) | curr))
ddply(groupGames,.(group),function(x) {max(is.na(x$goals) | curr)})
ddply(groupGames,.(group),function(x) {max(is.na(x$goals) | x$curr)})
ddply(groupGames,.(group),done=function(x) {max(is.na(x$goals) | x$curr)})
ddply(groupGames,.(group),summarize,done=function(x) {max(is.na(x$goals) | x$curr)})
>>>>>>> origin/master
